snippet ind "index file" b
// @flow strict
export * from './${1:File}';
export { default } from './${1:File}';
export { default as ${1:File} } from './${1:File}';
endsnippet

snippet fefc "flow functional component" b
// @flow strict
import * as React from 'react';

type Props = {
	className?: string,
};

function ${1:Component}({ className }: Props)  {
	return (
	<div className={className}>
	</div>
);
}

export default $1;
endsnippet


snippet tsfc "typescript functional component" b
import * as React from 'react';

type Props = {
	className?: string;
};

function ${1:Component}({ className }: Props)  {
	return (
	<div className={className}>
	</div>
);
}

export default $1;
endsnippet


snippet im "import" b
import $1 from '$1';
endsnippet

snippet imt "import type {...}" b
import { $1 } from '$2';
endsnippet

snippet imn "import {...}" b
import { $1 } from '$2';
endsnippet

snippet ir "import React" b
import * as React from 'react';
endsnippet

snippet imnrr "import {...}" b
import { ${1:createSlice, createSelector} } from '@reduxjs/toolkit';
endsnippet

snippet imes "import @emotion/styled" b
import styled from '@emotion/styled';
endsnippet

snippet imss "import styled-components" b
import styled from 'styled-components';
endsnippet

snippet imrr "import hooks from react-redux" b
import { useQuery, useSelector } from 'react-redux';
endsnippet

snippet imnss "import {..} from styled-components" b
import { ${1:css} } from 'styled-components';
endsnippet


snippet st "styled component" b
const ${1:Container} = styled.${2:div}`
	display: flex;
	flex-direction: row;
`;
endsnippet


snippet pseudo "css ::before/::after block" b
		position: relative;

		&::${2:before} {
			content: '';
			display: block;
			position: absolute;
			top: 0;
			bottom: 0;
			left: 0;
			right: 0;
		}
endsnippet


snippet useef "useEffect hook" b
React.useEffect(() => {
	${1}
}, []);
endsnippet

snippet uses "useState hook" b
const [${1:var}, set${1}] = React.useState<${2}>(() => ${3});
endsnippet

snippet usesb "useState: boolean" b
const [${1:var}, set${1}] = React.useState<boolean>(() => ${2:false});
endsnippet

snippet usess "useState: string" b
const [${1:var}, set${1}] = React.useState<string>(() => ${2:''});
endsnippet

snippet usesn "useState: number" b
const [${1:var}, set${1}] = React.useState<number>(() => ${2:0});
endsnippet

snippet used "useReducer hook" b
const [${1:var}, set${1}] = React.useReducer<${2}>(() => ${3});
endsnippet

snippet usedb "usReducer: boolean" b
const [${1:var}, set${1}] = React.useReducer<boolean>(() => ${2:false});
endsnippet

snippet useds "usReducer: string" b
const [${1:var}, set${1}] = React.useReducer<string>(() => ${2:''});
endsnippet

snippet usedn "usReducer: number" b
const [${1:var}, set${1}] = React.useReducer<number>(() => ${2:0});
endsnippet

snippet useref "useRef hook" b
const ${1:var}Ref = React.Ref<null| ${2:React.ElementType}>(null);
React.useEffect(() => {
	${1}
}, []);
endsnippet

snippet userd "useReducer hook" b
React.useEffect(() => {
	${1}
}, []);
endsnippet

snippet fwref "useReducer hook" b
React.useEffect(() => {
	${1}
}, []);
endsnippet


snippet uaf "use apollo fragment" b
import { useQuery, gql } from '@apollo/client';

const ${1:Component}.fragmants = {
	${2:prop}: gql`
		fragmant $1_$2 on SomeType {
		  __typename
			id
		}
	`,
}

function use$1() {
  const { data } = useQuery($1);
	return data
}

export default use$1;
endsnippet

snippet exa "export as"
export { $1 as $2 };
endsnippet

snippet exd "export default"
export default $1;
endsnippet

snippet exf "export from"
export $1 from '$2';
endsnippet

snippet cdm "component did mount"
componentDidMount () {
	$0
}
endsnippet

snippet cdup "component did update"
componentDidUpdate (prevProps, prevState) {
	$0
}
endsnippet

snippet cwum "component will unmount"
componentWillUnmount () {
	$0
}
endsnippet

snippet dp "static defaultProps"
static defaultProps = {
	className: '',
};
endsnippet

snippet mapdbg "map debugger"
.map(x => { debugger; return x; })
endsnippet

snippet maplog "map log"
.map(x => { console.log(x); return x; })
endsnippet

snippet edf "eslint-disable"
/* eslint-disable $1 */
/* eslint-enable $1 */
endsnippet

snippet edl "eslint-disable-line"
// eslint-disable-line $1
endsnippet

snippet edn "eslint-disable-next-line"
// eslint-disable-next-line $1
endsnippet

snippet fdn "flowlint-next-line"
// flowlint-next-line $1
endsnippet

snippet pdn "prettier ignore"
// prettier-ignore $1
endsnippet
